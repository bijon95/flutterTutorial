// package scrollable_positioned_list: ^0.1.6

import 'dart:math';
import 'package:flutter/material.dart';
import 'package:scrollable_positioned_list/scrollable_positioned_list.dart';

const numberOfItems = 50;
const minItemHeight = 20.0;
const maxItemHeight = 150.0;
const scrollDuration = Duration(seconds: 2);

/// Example widget that uses [ScrollablePositionedList].
///
/// Shows a [ScrollablePositionedList] along with the following controls:
///   - Buttons to jump or scroll to certain items in the list.
///   - Slider to control the alignment of the items being scrolled or jumped
///   to.
///   - A checkbox to reverse the list.
///
/// If the device this example is being used on is in portrait mode, the list
/// will be vertically scrollable, and if the device is in landscape mode, the
/// list will be horizontally scrollable.
class ScrollablePositionedListPage extends StatefulWidget {
  const ScrollablePositionedListPage({Key key}) : super(key: key);

  @override
  _ScrollablePositionedListPageState createState() =>
      _ScrollablePositionedListPageState();
}

class _ScrollablePositionedListPageState
    extends State<ScrollablePositionedListPage>
    with SingleTickerProviderStateMixin {
  /// Controller to scroll or jump to a particular item.
  final ItemScrollController itemScrollController = ItemScrollController();

  /// Listener that reports the position of items when the list is scrolled.
  final ItemPositionsListener itemPositionsListener =
  ItemPositionsListener.create();
  List<double> itemHeights;
  List<Color> itemColors;
  bool reversed = false;

  /// The alignment to be used next time the user scrolls or jumps to an item.
  double alignment = 0;

  TabController _tabController;

  @override
  void initState() {
    _tabController = new TabController(length: 4, vsync: this);

    super.initState();
    final heightGenerator = Random(328902348);
    final colorGenerator = Random(42490823);
    itemHeights = List<double>.generate(
        numberOfItems,
            (int _) =>
        heightGenerator.nextDouble() * (maxItemHeight - minItemHeight) +
            minItemHeight);
    itemColors = List<Color>.generate(
        numberOfItems,
            (int _) =>
            Color(colorGenerator.nextInt(pow(2, 32) - 1)).withOpacity(1));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        body: NestedScrollView(
            headerSliverBuilder:
                (BuildContext context, bool innerBoxisScrolled) {
              return <Widget>[
                SliverAppBar(
                  forceElevated: false,
                  floating: false,
                  snap: false,
                  pinned: true,
                  expandedHeight: 250,
                  flexibleSpace: FlexibleSpaceBar(
                    centerTitle: false,
                    title: Text("Shop name"),
                    background: Image.network(
                      'http://img1.mukewang.com/5c18cf540001ac8206000338.jpg',
                      fit: BoxFit.cover,
                    ),
                  ),
                ),
                SliverPersistentHeader(
                  pinned: true,
                  delegate: StickyTabBarDelegate(
                    child: TabBar(
                      labelColor: Colors.black,
                      onTap: (index) async {
                        jumpTo(index);
                      },
                      controller: _tabController,
                      tabs: [
                        new Tab(
                          text: "About",
                        ),
                        new Tab(
                          text: "Barber",
                        ),
                        new Tab(
                          text: "Service",
                        ),
                        new Tab(
                          text: "Review",
                        )
                      ],
                    ),
                  ),
                ),
              ];
            },
            body: OrientationBuilder(
              builder: (context, orientation) =>
                  Column(
                    children: <Widget>[
                      Expanded(
                        child: list(orientation),
                      ),
                      positionsView,
                      Row(
                        children: <Widget>[
                          Column(
                            children: <Widget>[],
                          ),
                        ],
                      )
                    ],
                  ),
            )),
      );

}

  Widget list(Orientation orientation) => ScrollablePositionedList.builder(
        itemCount: 4,
        itemBuilder: (context, index) {
          return viewPage(index);
        },
        itemScrollController: itemScrollController,
        itemPositionsListener: itemPositionsListener,
        scrollDirection: orientation == Orientation.portrait
            ? Axis.vertical
            : Axis.horizontal,
      );

  Widget get positionsView => ValueListenableBuilder<Iterable<ItemPosition>>(
        valueListenable: itemPositionsListener.itemPositions,
        builder: (context, positions, child) {
          int min;
          int max;
          if (positions.isNotEmpty) {
            // Determine the first visible item by finding the item with the
            // smallest trailing edge that is greater than 0.  i.e. the first
            // item whose trailing edge in visible in the viewport.
            min = positions
                .where((ItemPosition position) => position.itemTrailingEdge > 0)
                .reduce((ItemPosition min, ItemPosition position) =>
                    position.itemTrailingEdge < min.itemTrailingEdge
                        ? position
                        : min)
                .index;
            // Determine the last visible item by finding the item with the
            // greatest leading edge that is less than 1.  i.e. the last
            // item whose leading edge in visible in the viewport.
            max = positions
                .where((ItemPosition position) => position.itemLeadingEdge < 1)
                .reduce((ItemPosition max, ItemPosition position) =>
                    position.itemLeadingEdge > max.itemLeadingEdge
                        ? position
                        : max)
                .index;
            _tabController.index = min;
          }

          return Container();

//        Row(
//        children: <Widget>[
//          Expanded(child: Text('First Item: ${min ?? ''}')),
//          Expanded(child: Text('Last Item: ${max ?? ''}')),
//          const Text('Reversed: '),
//          Checkbox(
//              value: reversed,
//              onChanged: (bool value) => setState(() {
//                reversed = value;
//              }))
//        ],
//      );
        },
      );

  Widget scrollButton(int value) => GestureDetector(
        key: ValueKey<String>('Scroll$value'),
        onTap: () => scrollTo(value),
        child: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 20),
            child: Text('$value')),
      );

  Widget jumpButton(int value) => GestureDetector(
        key: ValueKey<String>('Jump$value'),
        onTap: () => jumpTo(value),
        child: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 20),
            child: Text('$value')),
      );

  void scrollTo(int index) => itemScrollController.scrollTo(
      index: index,
      duration: scrollDuration,
      curve: Curves.easeInOutCubic,
      alignment: alignment);

  void jumpTo(int index) =>
      itemScrollController.jumpTo(index: index, alignment: alignment);

  /// Generate item number [i].
  Widget item(int i, Orientation orientation) {}

  Widget container1() {
    return Container(
      color: Colors.red,
      height: 600,
    );
  }

  Widget container2() {
    return Container(
      color: Colors.blueAccent,
      height: 600,
    );
  }

  Widget container3() {
    return Container(
      color: Colors.yellowAccent,
      height: 600,
    );
  }

  Widget container4() {
    return Container(
      color: Colors.purple,
      height: 800,
    );
  }

  // static view listview
  Widget viewPage(int i) {
    return i == 0
        ? container1()
        : i == 1
            ? container2()
            : i == 2 ? container3() : i == 3 ? container4() : container1();
  }
}
class StickyTabBarDelegate extends SliverPersistentHeaderDelegate {
  final TabBar child;

  StickyTabBarDelegate({@required this.child});

  @override
  Widget build(BuildContext context, double shrinkOffset, bool overlapsContent) {
    return this.child;
  }

  @override
  double get maxExtent => this.child.preferredSize.height;

  @override
  double get minExtent => this.child.preferredSize.height;

  @override
  bool shouldRebuild(SliverPersistentHeaderDelegate oldDelegate) {
    return true;
  }
}


